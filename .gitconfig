[user]
    name = Pete Chudykowski
    email = pete.chudykowski@dreamhost.com

[core]
    ; text-editor
    editor = vim

[color]
    ui = true
    diff = true
    pager = true
    status = auto
    branch = auto

[alias]
    ; shortcuts
    ci = commit
    co = checkout
    br = branch
    st = status

    ; TBI:
    ; `git trim` - maintain your tree: trim old branches!
    ;   Delete all local branches which track branches that
    ;   no longer exist on remote.
    trim = "!trim() {\
        echo "" && echo \"To Be Implemented\" && echo "";\
    };\
    trim"

    ; `git dev` - a shortcut to your dev branch.
    ;
    ; USAGE:
    ; git dev <new_branch> [branch_from | default:master]
    ;
    ; FUNCTION:
    ; if <new_branch> already exists at origin:
    ;   create a local branch tracking the remote one.
    ; if it does not:
    ;   create <new_branch> at origin
    ;   and a local one tracking the remote one.
    ; start dev-ing
    dev = "!dev() {\
        newbranch=$1;\
        frombranch=$2;\
        [ -z $frombranch ] && frombranch='master';\
        \
        [ -z $newbranch ]\
            && echo "" && echo \"Specify a branch\"\
            && echo "" && exit 1;\
        haslocal=$(git branch | grep $newbranch | wc -l);\
        [ $haslocal != "0" ]\
            && git branch\
            && echo "" && echo \"You already have a local branch matching the name $newbranch!\"\
            && echo "" && echo \"How about I check it out for you?\"\
            && git checkout $newbranch && git status\
            && echo "" && exit 1;\
        \
        echo "" && echo \"git fetch...\" && git fetch;\
        echo \"checking if $newbranch already exists on remote...\";\
        echo "";\
        alreadythere=$(git ls-remote --heads origin $newbranch);\
        \
        [ -z \"$alreadythere\" ]\
            && echo \"    ...it doesn't! Making new one...\"\
            && echo "" && echo \"checking out $frombranch...\"\
            && git checkout $frombranch\
            \
            && echo "" && echo \"updating $frombranch...\"\
            && git pull --rebase\
            \
            && echo "" && echo \"branching into $newbranch from $frombranch...\"\
            && git checkout -b $newbranch\
            \
            && echo "" && echo \"creating $newbranch on remote...\"\
            && git push origin $newbranch\
            \
            && echo "" && echo \"setting $newbranch to track remote...\"\
            && git branch -u origin/$newbranch\
            && echo "" && echo \"You are tracking a BRAND NEW origin/$newbranch which branched from origin/$frombranch\"\
            && echo "" && echo \"Do your DEVest!\"\
            && echo "" && exit 0;\
        \
        [ -n \"$alreadythere\" ]\
            && echo \"    ...it does!\"\
            && echo ""\
            && echo \"branching and tracking from origin/$newbranch...\"\
            && git branch $newbranch --track origin/$newbranch\
            && echo "" && echo \"checking out $newbranch\"\
            && git checkout $newbranch\
            && echo "" && echo \"You are tracking an ALREADY EXISTING origin/$newbranch\"\
            && echo \"Do your DEVest!\"\
            && echo "" && exit 0;\
        \
    };\
    dev"

    ; Useful aliases for Gerrit courtesy of Stephon Striplin

    ; git review [branch_for_review]
    ; interface to pushing refs for review to Gerrit
    ; defaults to the tracked remote branch
    ; if the current branch is not tracking anything
    ; then defaults to master
    review = "!review() {\
        merge=$1;\
        [ -z $merge ] && {\
            branch=$(git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD));\
            merge=$(git config --get branch.$branch.merge | cut -d/ -f3);\
        };\
        [ -z $merge ] && merge=master;\
        git push origin HEAD:refs/for/$merge;\
    };\
    review"

    ; git draft [branch_for_draft]
    ; interface to pushing refs for draft to Gerrit
    ; defaults to the tracked remote branch
    ; if the current branch is not tracking anything
    ; then defaults to master
    draft = "!draft() {\
        merge=$1;\
        [ -z $merge ] && {\
            branch=$(git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD));\
            merge=$(git config --get branch.$branch.merge | cut -d/ -f3);\
        };\
        [ -z $merge ] && merge=master;\
        git push origin HEAD:refs/drafts/$merge;\
    };\
    draft"

    ; git track <new_branch> [branch_to_track]
    ; automatically set up a tracking branch
    ; defaults to tracking origin/master
    track = "!track() {\
        newbranch=$1;\
        [ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
        trackedbranch=$2;\
        [ -z $trackedbranch ] && trackedbranch='origin/master';\
        git checkout -b $newbranch --track $trackedbranch;\
    };\
    track"

    ; works exactly the same as track, but I found no way to do
    ; start = track
    start = "!track() {\
        newbranch=$1;\
        [ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
        trackedbranch=$2;\
        [ -z $trackedbranch ] && trackedbranch='origin/master';\
        git checkout -b $newbranch --track $trackedbranch;\
    };\
    track"

    ; git finish [branch_to_delete]
    finish = "!finish() {\
        deletebranch=$1;\
        [ -z $deletebranch ] &&\
            deletebranch=$(git for-each-ref --format='%(refname:short)'\
                $(git symbolic-ref HEAD));\
        [[ \"$deletebranch\" == 'master' ]] &&\
            echo \"Can't delete master\" && exit 1;\
        git checkout master &&\
        git pull --rebase &&\
        git branch -D $deletebranch;\
    };\
    finish"

    ; git create-branch
    create-branch = "!create_branch() {\
        branch_from=$1;\
        new_branch=$2;\
        git fetch &&\
        git push origin $branch_from:refs/heads/$new_branch;\
    };\
    create_branch"

[push]
    default = simple
