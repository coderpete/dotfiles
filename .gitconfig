[user]
    name = Pete Chudykowski
    email = pete.chudykowski@dreamhost.com

[core]
    ; text-editor
    editor = vim
	pager = diff-so-fancy | less --tabs=4 -RFX

[color]
	ui = true
    diff = true
    pager = true
    status = auto
    branch = auto

[alias]
    ; shortcuts
    ci = commit
    co = checkout
    br = branch
    st = status

    ; TBI:
    ; `git trim` - maintain your tree: trim old branches!
    ;   Delete all local branches which track branches that
    ;   no longer exist on remote.
    trim = "!trim() {\
        echo "" && echo \"To Be Implemented\" && echo "";\
    };\
    trim"

    ; `git mr <targetbranch>` - create a merge request in gitlab!
    mr = "!mr() {\
        [ -z $targetbranch ] && targetbranch='master'; \
        git push -o merge_request.create -o merge_request.target=$1; \
    };\
    mr"

    ; `git blast <branch>`
    ;   Delete branch both local and at origin.
    blast = "!blast() {\
        Y=\"\\033[1;33m\";\
        B=\"\\033[1;34m\";\
        N=\"\\033[0m\";\
        G=\"\\033[1;32m\";\
        R=\"\\033[1;31m\";\
        \
        branch=$1;\
        \
        [ \"$branch\" = \"master\" ]\
            && printf \"\\n\\t${R}NOPE!\\n\\tNot deleting your master branch!\\n\\tARE YOU MAD?!${N}\\n\\n\"\
            && exit 1;\
        \
        printf \"\\n${Y}Switching to master${N}\\n\";\
        printf \"${B}git checkout master ...${N}\\n\";\
        git checkout master;\
        \
        printf \"\\n${Y}Fetching refs${N}\\n\";\
        printf \"${B}git fetch ...${N}\\n\";\
        git fetch;\
        \
        printf \"\\n${Y}Deleting remote branch 'origin/${branch}'${N}\\n\";\
        printf \"\\n\\t${G}PEW! PEW!${N}\\n\";\
        printf \"\\n${B}git push --delete origin '${branch}' ...${N}\\n\";\
        git push --delete origin \"${branch}\";\
        \
        printf \"\\n${Y}Deleting local branch '${branch}'${N}\\n\";\
        printf \"\\n\\t${G}PEW! PEW!${N}\\n\";\
        printf \"\\n${B}git branch -D '${branch}' ...${N}\\n\";\
        git branch -D \"${branch}\";\
        \
        printf \"\\n\\t${G}  POOF!${N}\\n\\n\";\
    };\
    blast"

    ; `git dev` - a shortcut to your dev branch.
    ;
    ; USAGE:
    ; git dev <new_branch> [branch_from | default:master]
    ;
    ; FUNCTION:
    ; if <new_branch> already exists locally:
    ;   switch to the local branch.
    ; if <new_branch> already exists at origin:
    ;   create a local branch tracking the remote one.
    ; if it does not:
    ;   create <new_branch> at origin
    ;   and a local one tracking the remote one.
    ; start dev-ing
    dev = "!dev() {\
        R=\"\\033[1;31m\";\
        G=\"\\033[1;32m\";\
        Y=\"\\033[1;33m\";\
        B=\"\\033[1;34m\";\
        W=\"\\033[1;37m\";\
        N=\"\\033[0m\";\
        \
        newbranch=$1;\
        frombranch=$2;\
        \
        [ \"$newbranch\" = \"master\" ]\
            && printf \"\\n\\t${R}NOPE!\\n\\tNot messing with master branch!\\n\\tARE YOU MAD?!${N}\\n\\n\"\
            && exit 1;\
        \
        [ -z $frombranch ] && frombranch='master';\
        \
        [ -z $newbranch ]\
            && printf \"\\n${R}Specify branch name!${N}\\n\"\
            && printf \"\\n${Y}USAGE: git dev '<new_branch>' [branch_from | default:master]${N}\\n\"\
            && printf \"\\n\" && exit 1;\
        \
        printf \"\\n${Y}Checking if branch '${newbranch}' already exists locally${N}\\n\";\
        printf \"${B}git rev-parse --verify '${newbranch}' ...${N}\\n\";\
        git rev-parse --verify \"${newbranch}\";\
        [ \"$?\" == \"0\" ]\
            && printf \"${R}Found local branch '${newbranch}'${N}\\n\"\
            && printf \"\\n${Y}Switching to local branch '${newbranch}'${N}\\n\"\
            && printf \"${B}git checkout '${newbranch}' ...${N}\\n\"\
            && git checkout \"${newbranch}\"\
            && printf \"\\n${G}You are now on your ${W}ALREADY EXISTING LOCAL BRANCH${G} '${newbranch}'\\n\"\
            && printf \"\\nDo your DEVest!${N}\\n\\n\"\
            && exit 0;\
        \
        printf \"${R}No local branch '${newbranch}' found.${N}\\n\\n\";\
        printf \"\\n${Y}Checking if branch '${newbranch}' exists at origin${N}\\n\";\
        printf \"${B}git fetch ...${N}\\n\" && git fetch;\
        printf \"\\n${B}git ls-remote --heads origin '${newbranch}' ...${N}\\n\";\
        alreadythere=$(git ls-remote --heads origin ${newbranch});\
        \
        [ -z \"$alreadythere\" ]\
            && printf \"${R}No remote branch '${newbranch}' found at origin${N}\\n\"\
            && printf \"\\n${Y}Creating '${newbranch}' locally and at origin by branching from '${frombranch}'${N}\\n\"\
            && printf \"${B}git checkout '${frombranch}' ...${N}\\n\"\
            && git checkout \"${frombranch}\"\
            \
            && printf \"\\n${Y}Updating '${frombranch}'\\n\"\
            && printf \"${B}git pull --rebase ...${N}\\n\"\
            && git pull --rebase\
            \
            && printf \"\\n${Y}Branching into '${newbranch}' from '${frombranch}'\\n\"\
            && printf \"${B}git checkout -b '${newbranch}' ...${N}\\n\"\
            && git checkout -b \"${newbranch}\"\
            \
            && printf \"\\n${Y}Creating '${newbranch}' on remote\\n\"\
            && printf \"${B}git push origin '${newbranch}' ...${N}\\n\"\
            && git push origin \"${newbranch}\"\
            \
            && printf \"\\n${Y}Setting '${newbranch}' to track remote\\n\"\
            && printf \"${B}git branch -u 'origin/${newbranch}' ...${N}\\n\"\
            && git branch -u \"origin/${newbranch}\"\
            && printf \"\\n${G}You are now on your ${W}BRAND NEW LOCAL BRANCH${G} '${newbranch}'\\n\"\
            && printf \"\\twhich is tracking a ${W}BRAND NEW${G} 'origin/${newbranch}'\\n\"\
            && printf \"\\t\\twhich was ${W}BRANCHED FROM YOUR LOCAL${G} '${frombranch}'\\n\"\
            && printf \"\\nDo your DEVest!${N}\\n\\n\"\
            && exit 0;\
        \
        [ -n \"$alreadythere\" ]\
            && printf \"\\n${R}Found branch '${newbranch}' at origin.\\n\"\
            && printf \"\\n${Y}Branching and tracking from 'origin/${newbranch}'\\n\"\
            && printf \"${B}git branch '${newbranch}' --track 'origin/${newbranch}' ...${N}\\n\"\
            && git branch $newbranch --track \"origin/${newbranch}\"\
            && printf \"\\n${Y}Checking out '${newbranch}'${N}\\n\"\
            && printf \"\\n${B}git checkout '${newbranch}' ...${N}\\n\"\
            && git checkout \"${newbranch}\"\
            && printf \"\\n${G}You are now on your ${W}BRAND NEW LOCAL BRANCH${G} '${newbranch}'\\n\"\
            && printf \"\\twhich is tracking an ${W}ALREADY EXISTING${G} 'origin/${newbranch}'\\n\"\
            && printf \"\\nDo your DEVest!${N}\\n\\n\"\
            && exit 0;\
        \
    };\
    dev"

    ; Useful aliases for Gerrit courtesy of Stephon Striplin

    ; git review [branch_for_review]
    ; interface to pushing refs for review to Gerrit
    ; defaults to the tracked remote branch
    ; if the current branch is not tracking anything
    ; then defaults to master
    review = "!review() {\
        merge=$1;\
        [ -z $merge ] && {\
            branch=$(git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD));\
            merge=$(git config --get branch.$branch.merge | cut -d/ -f3);\
        };\
        [ -z $merge ] && merge=master;\
        git push origin HEAD:refs/for/$merge;\
    };\
    review"

    ; git draft [branch_for_draft]
    ; interface to pushing refs for draft to Gerrit
    ; defaults to the tracked remote branch
    ; if the current branch is not tracking anything
    ; then defaults to master
    draft = "!draft() {\
        merge=$1;\
        [ -z $merge ] && {\
            branch=$(git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD));\
            merge=$(git config --get branch.$branch.merge | cut -d/ -f3);\
        };\
        [ -z $merge ] && merge=master;\
        git push origin HEAD:refs/drafts/$merge;\
    };\
    draft"

    ; git track <new_branch> [branch_to_track]
    ; automatically set up a tracking branch
    ; defaults to tracking origin/master
    track = "!track() {\
        newbranch=$1;\
        [ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
        trackedbranch=$2;\
        [ -z $trackedbranch ] && trackedbranch='origin/master';\
        git checkout -b $newbranch --track $trackedbranch;\
    };\
    track"

    ; works exactly the same as track, but I found no way to do
    ; start = track
    start = "!track() {\
        newbranch=$1;\
        [ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
        trackedbranch=$2;\
        [ -z $trackedbranch ] && trackedbranch='origin/master';\
        git checkout -b $newbranch --track $trackedbranch;\
    };\
    track"

    ; git finish [branch_to_delete]
    finish = "!finish() {\
        deletebranch=$1;\
        [ -z $deletebranch ] &&\
            deletebranch=$(git for-each-ref --format='%(refname:short)'\
                $(git symbolic-ref HEAD));\
        [[ \"$deletebranch\" == 'master' ]] &&\
            echo \"Can't delete master\" && exit 1;\
        git checkout master &&\
        git pull --rebase &&\
        git branch -D $deletebranch;\
    };\
    finish"

    ; git create-branch
    create-branch = "!create_branch() {\
        branch_from=$1;\
        new_branch=$2;\
        git fetch &&\
        git push origin $branch_from:refs/heads/$new_branch;\
    };\
    create_branch"

[push]
    default = simple
[color "diff-highlight"]
	oldNormal = red bold
	oldHighlight = red bold 52
	newNormal = green bold
	newHighlight = green bold 22
[color "diff"]
	meta = yellow
	frag = magenta bold
	commit = yellow bold
	old = red bold
	new = green bold
	whitespace = red reverse
[diff-so-fancy]
	first-run = false
