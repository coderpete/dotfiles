[user]
	name = Pete Chudykowski
	email = pete.chudykowski@dreamhost.com

[core]
	; text-editor
	editor = vim

[color]
    ui = true
    diff = true
    pager = true
    status = auto
    branch = auto

[alias]
    ; shortcuts
	ci = commit
	co = checkout
	br = branch
	st = status

    ;git check - runs `perl -cw` on changed files inside LDE.
    check  = !ndn-lde check $(git ls-files -m)

    ;git stashenv
    stashenv = "!f() { git stash save -u conf; }; f"

    ;git setenv - apply stash with develpment environment dev changes
    setenv = "!f() { git stash apply stash^{/conf}; }; f"

	;review = "!review() { branch=$1; [ -z $branch ] && branch=master; git push origin HEAD:refs/for/$branch; }; review"

	; git review [branch_for_review]
	; interface to pushing refs for review to Gerrit
	; defaults to the tracked remote branch
	; if the current branch is not tracking anything
	; then defaults to master
	review = "!review() {\
		merge=$1;\
		[ -z $merge ] && {\
			branch=$(git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD));\
			merge=$(git config --get branch.$branch.merge | cut -d/ -f3);\
		};\
		[ -z $merge ] && merge=master;\
		git push origin HEAD:refs/for/$merge;\
	};\
	review"

	; git draft [branch_for_draft]
	; interface to pushing refs for draft to Gerrit
	; defaults to the tracked remote branch
	; if the current branch is not tracking anything
	; then defaults to master
	draft = "!draft() {\
		merge=$1;\
		[ -z $merge ] && {\
			branch=$(git for-each-ref --format='%(refname:short)' $(git symbolic-ref HEAD));\
			merge=$(git config --get branch.$branch.merge | cut -d/ -f3);\
		};\
		[ -z $merge ] && merge=master;\
		git push origin HEAD:refs/drafts/$merge;\
	};\
	draft"

	; git track <new_branch> [branch_to_track]
	; automatically set up a tracking branch
	; defaults to tracking origin/master
	track = "!track() {\
		newbranch=$1;\
		[ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
		trackedbranch=$2;\
		[ -z $trackedbranch ] && trackedbranch='origin/master';\
		git checkout -b $newbranch --track $trackedbranch;\
	};\
	track"

	; works exactly the same as track, but I found no way to do
	; automatically set up a tracking branch
	; defaults to tracking origin/master
	start = "!start() {\
		newbranch=$1;\
		[ -z $newbranch ] && echo \"Specify a branch\" && exit 1;\
		trackedbranch=$2;\
		[ -z $trackedbranch ] && trackedbranch='origin/master';\
		git checkout -b $newbranch --track $trackedbranch;\
	};\
	start"

	; git finish [branch_to_delete]
	finish = "!finish() {\
		deletebranch=$1;\
		[ -z $deletebranch ] &&\
			deletebranch=$(git for-each-ref --format='%(refname:short)'\
				$(git symbolic-ref HEAD));\
		[[ \"$deletebranch\" == 'master' ]] &&\
			echo \"Can't delete master\" && exit 1;\
		git checkout master &&\
		git pull --rebase &&\
		git branch -D $deletebranch;\
	};\
	finish"

	; git create-branch <new-remote-branch> origin/<branch-from>
	create-branch = "!create_branch() {\
		help=\"\ngit create-branch <new-remote-branch> origin/<branch-from>\n\";\
		new_branch=$1;\
		[ -z $new_branch ] && echo \"$help\" && exit 1;\
		branch_from=$(grep '^origin' <<< $2);\
		[ -z $branch_from ] && echo \"$help\" && exit 1;\
		git fetch &&\
		git push origin $branch_from:refs/heads/$new_branch;\
	};\
	create_branch"
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
